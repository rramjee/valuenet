medium pred: SELECT T1.Song_Name, T1.Country, T1.Age FROM singer AS T1     ORDER BY T1.Age DESC                                                                                                                                                                                                                                                                                                          | 0/1032 [00:00<?, ?it/s]
medium gold: SELECT name ,  country ,  age FROM singer ORDER BY age DESC

medium pred: SELECT T1.Song_Name, T1.Country, T1.Age FROM singer AS T1     ORDER BY T1.Age DESC
medium gold: SELECT name ,  country ,  age FROM singer ORDER BY age DESC

medium pred: SELECT avg( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = 'France'
medium gold: SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'

medium pred: SELECT avg( T1.Average), min( T2.Age), max( T2.Age) FROM stadium AS T1 JOIN concert AS T13 ON T1.Stadium_ID = T13.Stadium_ID JOIN singer_in_concert AS T14 ON T13.concert_ID = T14.concert_ID JOIN singer AS T2 ON T14.Singer_ID = T2.Singer_ID WHERE T2.Country = '1'
medium gold: SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'

medium pred: SELECT avg( T1.Average), max( T1.Capacity) FROM stadium AS T1
medium gold: SELECT avg(capacity) ,  max(capacity) FROM stadium

medium pred: SELECT avg( T1.Average), max( T1.Capacity) FROM stadium AS T1
medium gold: SELECT avg(capacity) ,  max(capacity) FROM stadium

medium pred: SELECT T1.Name, count( *) FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID  GROUP BY T1.Name
medium gold: SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id

medium pred: SELECT T1.Location, count( *) FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID  GROUP BY T1.Location
medium gold: SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id

medium pred: SELECT T1.Song_Name, T2.Theme, count( *) FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID  GROUP BY T2.concert_ID
medium gold: SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id

medium pred: SELECT T1.concert_Name, count( *) FROM concert AS T1  GROUP BY T1.concert_Name
medium gold: SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id

medium pred: SELECT T1.Name, count( *) FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID  GROUP BY T1.Name
medium gold: SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id

hard pred: SELECT T1.Song_Name FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014'
hard gold: SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014

hard pred: SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID JOIN concert AS T2 ON T13.concert_ID = T2.concert_ID WHERE T2.Year = '2014' and T2.concert_Name = '2014'
hard gold: SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014

medium pred: SELECT T1.Song_Name, T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%'
medium gold: SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'

medium pred: SELECT T1.Song_Name, T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%'
medium gold: SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'

hard pred: SELECT count( *) FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Capacity = (SELECT max( T23.Capacity) FROM stadium AS T23        )
hard gold: SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T2.Capacity DESC LIMIT 1

medium pred: SELECT T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID    ORDER BY T2.Age ASC LIMIT 1
medium gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1

medium pred: SELECT T1.Age FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID    ORDER BY T2.weight ASC LIMIT 1
medium gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1

medium pred: SELECT max( T1.weight), max( T1.PetType) FROM Pets AS T1
medium gold: SELECT max(weight) ,  petType FROM pets GROUP BY petType

hard pred: SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' and T2.Sex = 'F'
hard gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'

hard pred: SELECT count( *) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' and T2.Sex = 'dog'
hard gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'

extra pred: SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.PetType = 'cat' or T2.PetType = 'dog'
extra gold: SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'

extra pred: SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.PetType = 'cat' or T2.PetType = 'dog'
extra gold: SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'

extra pred: SELECT count( *) FROM Student AS T1
extra gold: SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'

extra pred: SELECT T1.Major, T1.Age FROM Student AS T1        EXCEPT SELECT T2.Major, T2.Age FROM Student AS T2 JOIN Has_Pet AS T14 ON T2.StuID = T14.StuID JOIN Pets AS T3 ON T14.PetID = T3.PetID WHERE T3.PetType = 'cat'
extra gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

extra pred: SELECT T1.Fname, T1.Age FROM Student AS T1 WHERE T1.StuID in (SELECT T22.StuID FROM Has_Pet AS T22 JOIN Pets AS T23 ON T22.PetID = T23.PetID WHERE T23.PetType = 'dog'       )       EXCEPT SELECT T2.Fname, T2.Age FROM Student AS T2 JOIN Has_Pet AS T14 ON T2.StuID = T14.StuID JOIN Pets AS T3 ON T14.PetID = T3.PetID WHERE T3.PetType = 'cat'
extra gold: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

extra pred: SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T13 ON T1.StuID = T13.StuID JOIN Pets AS T2 ON T13.PetID = T2.PetID WHERE T2.PetType = 'dog'       EXCEPT SELECT T3.Fname FROM Student AS T3 JOIN Has_Pet AS T15 ON T3.StuID = T15.StuID JOIN Pets AS T4 ON T15.PetID = T4.PetID WHERE T4.PetType = 'cat'
extra gold: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

medium pred: SELECT T1.PetType, T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID    ORDER BY T2.Age ASC LIMIT 1
medium gold: SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1

medium pred: SELECT T1.PetType, T1.pet_age FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID    ORDER BY T2.Age ASC LIMIT 1
medium gold: SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1

medium pred: SELECT T1.PetID, T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 1
medium gold: SELECT petid ,  weight FROM pets WHERE pet_age  >  1

medium pred: SELECT T1.PetID, T1.weight FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 1
medium gold: SELECT petid ,  weight FROM pets WHERE pet_age  >  1

medium pred: SELECT T1.PetType, avg( T2.Age), max( T2.Age) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY T1.PetType
medium gold: SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype

medium pred: SELECT T1.PetType, avg( T2.Age), max( T2.Age) FROM Pets AS T1 JOIN Has_Pet AS T13 ON T1.PetID = T13.PetID JOIN Student AS T2 ON T13.StuID = T2.StuID  GROUP BY T1.PetType
medium gold: SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype

hard pred: SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T1.Age = 3
hard gold: SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'

hard pred: SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T1.Age = 3
hard gold: SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'

medium pred: SELECT T1.Id, T2.CountryName, count( *) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T15 ON T14.Maker = T15.Id JOIN countries AS T2 ON T15.Country = T2.CountryId  GROUP BY T2.CountryId
medium gold: SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;

medium pred: SELECT T1.Id, T2.CountryName, count( *) FROM cars_data AS T1 JOIN car_names AS T13 ON T1.Id = T13.MakeId JOIN model_list AS T14 ON T13.Model = T14.Model JOIN car_makers AS T15 ON T14.Maker = T15.Id JOIN countries AS T2 ON T15.Country = T2.CountryId  GROUP BY T2.CountryId
medium gold: SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;

extra pred: SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < (SELECT avg( T23.Weight) FROM cars_data AS T23        )
extra gold: SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)

extra pred: SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight < (SELECT avg( T23.Weight) FROM cars_data AS T23        )
extra gold: SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)

extra pred: SELECT T1.Maker FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T14 ON T13.Model = T14.Model JOIN cars_data AS T2 ON T14.MakeId = T2.Id WHERE T2.Year = 1970
extra gold: SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';

 10%|████████████████████████████████████▌                                                                                                                                                                                                                                                                                                                                                    | 100/1032 [00:00<00:00, 987.19it/s]extra pred: SELECT T1.Make, T2.Year FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id    ORDER BY T2.Year ASC LIMIT 1                                                                                                                                                                                                                                                            | 100/1032 [00:00<00:00, 987.25it/s]
extra gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);

extra pred: SELECT T1.Maker, T2.Year FROM car_makers AS T1 JOIN model_list AS T14 ON T1.Id = T14.Maker JOIN car_names AS T3 ON T14.Model = T3.Model JOIN cars_data AS T2 ON T3.MakeId = T2.Id    ORDER BY T3.Make ASC LIMIT 1
extra gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);

medium pred: SELECT count( *), T2.FullName FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id  GROUP BY T2.FullName
medium gold: SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;

medium pred: SELECT count( *), T2.FullName, T2.Maker FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id  GROUP BY T1.Maker
medium gold: SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;

medium pred: SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = '1'
medium gold: SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';

medium pred: SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = '1'
medium gold: SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';

medium pred: SELECT count( *) FROM car_makers AS T1 WHERE T1.Country = 'france'
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';

medium pred: SELECT count( *) FROM car_makers AS T1 WHERE T1.Country = 'france'
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';

hard pred: SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.Country = 'usa'
hard gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';

hard pred: SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.Country = 'usa'
hard gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';

easy pred: SELECT avg( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Cylinders = 4
easy gold: SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;

hard pred: SELECT min( T1.Weight) FROM cars_data AS T1 WHERE T1.Year = 1974 and T1.Cylinders = (SELECT min( T22.Weight) FROM cars_data AS T22 WHERE T22.Year = 1974       )
hard gold: SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;

hard pred: SELECT T1.Weight FROM cars_data AS T1 WHERE T1.Year = 1974
hard gold: SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;

medium pred: SELECT T1.Maker, T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker
medium gold: SELECT Maker ,  Model FROM MODEL_LIST;

medium pred: SELECT T1.Maker, T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker
medium gold: SELECT Maker ,  Model FROM MODEL_LIST;

medium pred: SELECT DISTINCT T1.CountryName, T2.Id FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country
medium gold: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;

medium pred: SELECT T1.CountryName, T2.Id FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country
medium gold: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;

extra pred: SELECT T1.Country FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId  GROUP BY T1.Country HAVING count( *) >= 3
extra gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;

extra pred: SELECT T1.CountryName FROM countries AS T1  GROUP BY T1.CountryName HAVING count( *) >= 3
extra gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;

extra pred: SELECT max( T1.Horsepower), max( T2.Make) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3
extra gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;

extra pred: SELECT max( T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId  GROUP BY T2.Make  ORDER BY T1.Cylinders DESC LIMIT 1
extra gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;

hard pred: SELECT T1.Model FROM model_list AS T1  GROUP BY T1.Model  ORDER BY count( *) DESC LIMIT 1
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;

hard pred: SELECT T1.Make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id    ORDER BY T2.MPG DESC LIMIT 1
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;

eval_err_num:1
could not execute query 'SELECT avg( T1.Edispl) FROM cars_data AS T1 WHERE T1.Edispl = Volvo'. Exception: no such column: Volvo. Database: data/spider/original/database/car_1/car_1.sqlite
medium pred: SELECT avg( T1.Edispl) FROM cars_data AS T1 WHERE T1.Edispl = Volvo
medium gold: SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';

eval_err_num:2
could not execute query 'SELECT avg( T1.Edispl) FROM cars_data AS T1 WHERE T1.Year = volvo'. Exception: no such column: volvo. Database: data/spider/original/database/car_1/car_1.sqlite
medium pred: SELECT avg( T1.Edispl) FROM cars_data AS T1 WHERE T1.Year = volvo
medium gold: SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';

hard pred: SELECT T1.Model FROM model_list AS T1  GROUP BY T1.Model  ORDER BY count( *) DESC LIMIT 1
hard gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;

hard pred: SELECT T1.Model FROM model_list AS T1  GROUP BY T1.Model  ORDER BY count( *) DESC LIMIT 1
hard gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;

medium pred: SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'america'
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';

medium pred: SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.Maker = 'america'
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';

medium pred: SELECT T1.Maker, T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T2.Model > '3'
medium gold: SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;

extra pred: SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN car_names AS T3 ON T1.Model = T3.Model WHERE T2.FullName = 'General Motors' or T3.Make > '3500'
extra gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;

medium pred: SELECT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 3000     INTERSECT SELECT T2.Year FROM cars_data AS T2 WHERE T2.Weight > 4000
medium gold: SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000;

extra pred: SELECT count( *) FROM cars_data AS T1    ORDER BY T1.Accelerate ASC LIMIT 1
extra gold: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;

extra pred: SELECT count( *) FROM cars_data AS T1    ORDER BY T1.Accelerate ASC LIMIT 1
extra gold: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;

hard pred: SELECT count( *) FROM cars_data AS T1 WHERE T1.Accelerate > (SELECT max( T22.Horsepower) FROM cars_data AS T22        )
hard gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );

hard pred: SELECT count( *) FROM cars_data AS T1 WHERE T1.Accelerate > (SELECT max( T22.Horsepower) FROM cars_data AS T22        )
hard gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );

eval_err_num:3
could not execute query 'SELECT count( *) FROM countries AS T1   HAVING count( *) > 2'. Exception: a GROUP BY clause is required before HAVING. Database: data/spider/original/database/car_1/car_1.sqlite
easy pred: SELECT count( *) FROM countries AS T1   HAVING count( *) > 2
easy gold: SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 );

eval_err_num:4
could not execute query 'SELECT count( *) FROM countries AS T1   HAVING count( *) > 2'. Exception: a GROUP BY clause is required before HAVING. Database: data/spider/original/database/car_1/car_1.sqlite
easy pred: SELECT count( *) FROM countries AS T1   HAVING count( *) > 2
easy gold: SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 );

extra pred: SELECT T1.Horsepower, T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders > 3       EXCEPT SELECT T3.MPG, T4.Make FROM cars_data AS T3 JOIN car_names AS T4 ON T3.Id = T4.MakeId WHERE T3.Horsepower > '3'
extra gold: SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;

extra pred: SELECT T1.Id, T2.Make FROM car_makers AS T1 JOIN model_list AS T13 ON T1.Id = T13.Maker JOIN car_names AS T2 ON T13.Model = T2.Model WHERE T1.Id NOT IN (SELECT T23.MakeId FROM car_names AS T23 JOIN cars_data AS T24 ON T23.MakeId = T24.Id WHERE T24.Horsepower < '4'       )
extra gold: SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <  4;

extra pred: SELECT max( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Cylinders = 8 or T1.Year < 1980
extra gold: SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1;

extra pred: SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight > 3500       EXCEPT SELECT T3.Model FROM model_list AS T3 JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'Ford Motor Company'
extra gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';

extra pred: SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T13 ON T1.Model = T13.Model JOIN cars_data AS T2 ON T13.MakeId = T2.Id WHERE T2.Weight > 3500       EXCEPT SELECT DISTINCT T3.Model FROM model_list AS T3 JOIN car_names AS T4 ON T3.Model = T4.Model WHERE T4.Make = 'Ford Motor Company'
extra gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';

hard pred: SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Id NOT IN (SELECT T23.CountryId FROM countries AS T23        )
hard gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;

hard pred: SELECT T1.CountryName FROM countries AS T1 WHERE T1.CountryId NOT IN (SELECT T22.CountryId FROM countries AS T22        )
hard gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;

extra pred: SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker  GROUP BY T2.Maker HAVING count( *) >= 2   INTERSECT SELECT T3.Id, T4.Make FROM car_makers AS T3 JOIN model_list AS T5 ON T3.Id = T5.Maker JOIN car_names AS T4 ON T5.Model = T4.Model  GROUP BY T4.MakeId HAVING count( *) > 2
extra gold: SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;

extra pred: SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker  GROUP BY T2.Maker HAVING count( *) >= 2   INTERSECT SELECT T3.Id, T3.Maker FROM car_makers AS T3 JOIN model_list AS T4 ON T3.Id = T4.Maker  GROUP BY T4.Maker HAVING count( *) > 2
extra gold: SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;

extra pred: SELECT count( *) FROM continents AS T1
extra gold: SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';

extra pred: SELECT T1.Id, T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId  GROUP BY T1.Country HAVING count( *) > 3    UNION SELECT T3.Id, T4.CountryName FROM car_makers AS T3 JOIN countries AS T4 ON T3.Country = T4.CountryId WHERE T3.Maker = 'Fiat'
extra gold: SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';

easy pred: SELECT T1.Country FROM airlines AS T1 WHERE T1.Airline = 'JetBlue'
easy gold: SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"

easy pred: SELECT T1.Country FROM airlines AS T1 WHERE T1.Airline = 'JetBlue'
easy gold: SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"

easy pred: SELECT T1.Abbreviation FROM airlines AS T1 WHERE T1.Airline = 'JetBlue'
easy gold: SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"

medium pred: SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'United States '
medium gold: SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"

medium pred: SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'United States '
medium gold: SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"

medium pred: SELECT T1.AirportCode, T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony '
medium gold: SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"

 18%|█████████████████████████████████████████████████████████████████████▍                                                                                                                                                                                                                                                                                                                   | 190/1032 [00:00<00:00, 957.84it/s]easy pred: SELECT count( *) FROM airlines AS T1 WHERE T1.Country = 'United States '                                                                                                                                                                                                                                                                                                           | 190/1032 [00:00<00:00, 957.96it/s]
easy gold: SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"

easy pred: SELECT count( *) FROM flights AS T13 JOIN airports AS T2 ON T13.DestAirport = T2.AirportCode WHERE T2.Country = 'United States '
easy gold: SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"

medium pred: SELECT T1.City, T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Alton '
medium gold: SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"

medium pred: SELECT T1.City, T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Alton '
medium gold: SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"

easy pred: SELECT T1.AirportName FROM airports AS T1 WHERE T1.AirportName = 'AKO'
easy gold: SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"

eval_err_num:5
could not execute query 'SELECT count( *) FROM flights AS T1 WHERE * = ATO'. Exception: near "*": syntax error. Database: data/spider/original/database/flight_2/flight_2.sqlite
easy pred: SELECT count( *) FROM flights AS T1 WHERE * = ATO
easy gold: SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"

eval_err_num:6
could not execute query 'SELECT count( *) FROM flights AS T1 WHERE * = ATO'. Exception: near "*": syntax error. Database: data/spider/original/database/flight_2/flight_2.sqlite
easy pred: SELECT count( *) FROM flights AS T1 WHERE * = ATO
easy gold: SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"

medium pred: SELECT count( *) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'JetBlue'
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"

eval_err_num:7
could not execute query 'SELECT count( *) FROM flights AS T1 WHERE T1.FlightNo = JetBlue'. Exception: no such column: JetBlue. Database: data/spider/original/database/flight_2/flight_2.sqlite
medium pred: SELECT count( *) FROM flights AS T1 WHERE T1.FlightNo = JetBlue
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"

extra pred: SELECT T1.City FROM airports AS T1  GROUP BY T1.City  ORDER BY count( *) DESC LIMIT 1
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT T1.City FROM airports AS T1  GROUP BY T1.City  ORDER BY count( *) DESC LIMIT 1
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline  GROUP BY T1.uid  ORDER BY count( *) DESC LIMIT 1
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline  GROUP BY T1.uid  ORDER BY count( *) DESC LIMIT 1
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT T1.Abbreviation, T1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline  GROUP BY T1.uid  ORDER BY count( *) DESC LIMIT 1
extra gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1

extra pred: SELECT T1.Abbreviation, T2.Country FROM airlines AS T1 JOIN flights AS T3 ON T1.uid = T3.Airline JOIN airports AS T2 ON T3.DestAirport = T2.AirportCode  GROUP BY T2.AirportCode  ORDER BY count( *) ASC LIMIT 1
extra gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1

medium pred: SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline  GROUP BY T1.uid HAVING count( *) >= 10
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10

medium pred: SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline  GROUP BY T1.uid HAVING count( *) >= 10
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10

medium pred: SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.FlightNo < 200
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200

medium pred: SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline  GROUP BY T1.uid HAVING count( *) < 200
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200

eval_err_num:8
could not execute query 'SELECT T1.FlightNo FROM flights AS T1 WHERE T1.FlightNo = APG'. Exception: no such column: APG. Database: data/spider/original/database/flight_2/flight_2.sqlite
easy pred: SELECT T1.FlightNo FROM flights AS T1 WHERE T1.FlightNo = APG
easy gold: SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"

hard pred: SELECT T1.AirportName FROM airports AS T1 WHERE T1.AirportCode NOT IN (SELECT T22.AirportCode FROM airports AS T22        )
hard gold: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)

hard pred: SELECT T1.AirportName FROM airports AS T1 WHERE T1.AirportCode NOT IN (SELECT T22.AirportCode FROM airports AS T22        )
hard gold: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)

medium pred: SELECT T1.City FROM employee AS T1 WHERE T1.Age < 30 GROUP BY T1.City HAVING count( *) > 30
medium gold: SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1

medium pred: SELECT T1.City FROM employee AS T1 WHERE T1.Age < 30 GROUP BY T1.City HAVING count( *) > 30
medium gold: SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1

medium pred: SELECT T1.Manager_name, T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID  GROUP BY T2.Shop_ID  ORDER BY count( *) DESC LIMIT 1
medium gold: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1

 27%|█████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                                                                                                                                                                                   | 277/1032 [00:00<00:00, 928.05it/s]medium pred: SELECT DISTINCT count(DISTINCT T1.Name), count(DISTINCT T2.Shop_ID) FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID                                                                                                                                                                                                                                                 | 277/1032 [00:00<00:00, 928.17it/s]
medium gold: SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name

medium pred: SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number < 5
medium gold: SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5

medium pred: SELECT min( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code
medium gold: SELECT min(Version_Number) ,  template_type_code FROM Templates

medium pred: SELECT min( T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1  GROUP BY T1.Template_Type_Code
medium gold: SELECT min(Version_Number) ,  template_type_code FROM Templates

medium pred: SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID
medium gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"

medium pred: SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1
medium gold: SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID

medium pred: SELECT T1.Document_ID, count( *) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID   ORDER BY count( *) ASC
medium gold: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id

medium pred: SELECT T1.Document_ID, count( *) FROM Paragraphs AS T1  GROUP BY T1.Document_ID   ORDER BY count( *) ASC
medium gold: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id

easy pred: SELECT T1.Document_ID FROM Paragraphs AS T1  GROUP BY T1.Document_ID HAVING count( *) between 2 AND 2
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2

hard pred: SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Paragraph_Text = 'Brazil' and T2.Paragraph_Text = 'Ireland'
hard gold: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'

 38%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                                                                                                                                         | 392/1032 [00:00<00:00, 984.49it/s]hard pred: SELECT T1.Hometown FROM teacher AS T1 WHERE T1.Hometown = (SELECT count( *) FROM teacher AS T22        )█████████████████████████████████▏                                                                                                                                                                                                                                         | 392/1032 [00:00<00:00, 984.56it/s]
hard gold: SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1

medium pred: SELECT T1.Name FROM museum AS T1 JOIN visit AS T13 ON T1.Museum_ID = T13.Museum_ID JOIN visitor AS T2 ON T13.visitor_ID = T2.ID WHERE T2.Level_of_membership > 4    ORDER BY T2.Level_of_membership ASC
medium gold: SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC

easy pred: SELECT avg( T1.Age) FROM visitor AS T1 WHERE T1.Level_of_membership != 4
easy gold: SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4

medium pred: SELECT T1.Name, T1.Level_of_membership FROM visitor AS T1 WHERE T1.Age > 4    ORDER BY T1.Level_of_membership ASC
medium gold: SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC

hard pred: SELECT T1.Name FROM museum AS T1 WHERE T1.Open_Year > (SELECT min( T22.Open_Year) FROM museum AS T22 WHERE T22.Open_Year > '2010'       )
hard gold: SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)

medium pred: SELECT T1.Museum_ID, T1.Name, T2.Age FROM museum AS T1 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID JOIN visitor AS T2 ON T3.visitor_ID = T2.ID  GROUP BY T2.ID HAVING count( *) > 1
medium gold: SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1

extra pred: SELECT T1.Museum_ID, T1.Name, T2.Level_of_membership FROM museum AS T1 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID JOIN visitor AS T2 ON T3.visitor_ID = T2.ID  GROUP BY T2.ID  ORDER BY sum( T3.Total_spent) DESC LIMIT 1
extra gold: SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1

extra pred: SELECT T1.Museum_ID, T1.Name FROM museum AS T1  GROUP BY T1.Museum_ID, T1.Name  ORDER BY count( *) DESC LIMIT 1
extra gold: SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1

medium pred: SELECT sum( T1.Num_of_Ticket) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1
medium gold: SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1

extra pred: SELECT T1.Name FROM museum AS T1 WHERE T1.Open_Year < '2009'     INTERSECT SELECT T2.Name FROM museum AS T2 WHERE T2.Open_Year > '2011'
extra gold: SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011

extra pred: SELECT count( *) FROM visit AS T1 JOIN museum AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T2.Museum_ID NOT IN (SELECT T23.Museum_ID FROM visit AS T23 JOIN museum AS T24 ON T23.Museum_ID = T24.Museum_ID WHERE T24.Open_Year > '2010'       )
extra gold: SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)

medium pred: SELECT avg( T1.loser_age), T1.winner_age FROM matches AS T1  GROUP BY T1.winner_age
medium gold: SELECT avg(loser_age) ,  avg(winner_age) FROM matches

medium pred: SELECT avg( T1.winner_age), T1.loser_age FROM matches AS T1  GROUP BY T1.loser_age
medium gold: SELECT avg(loser_age) ,  avg(winner_age) FROM matches

easy pred: SELECT T1.loser_rank FROM matches AS T1
easy gold: SELECT min(loser_rank) FROM matches

easy pred: SELECT T1.loser_rank FROM matches AS T1
easy gold: SELECT min(loser_rank) FROM matches

hard pred: SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year = 2013     INTERSECT SELECT T3.first_name FROM players AS T3 JOIN matches AS T4 ON T3.player_id = T4.winner_id WHERE T4.year = 2016
hard gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016

eval_err_num:9
could not execute query 'SELECT T1.first_name, T1.country_code FROM players AS T1 WHERE T1.country_code = 'Australian Open'     INTERSECT SELECT T2.first_name, T2.country_code FROM players AS T2 JOIN rankings AS T3 ON T2.player_id = T3.player_id WHERE T3.ranking = WTA Championships'. Exception: near "Championships": syntax error. Database: data/spider/original/database/wta_1/wta_1.sqlite
extra pred: SELECT T1.first_name, T1.country_code FROM players AS T1 WHERE T1.country_code = 'Australian Open'     INTERSECT SELECT T2.first_name, T2.country_code FROM players AS T2 JOIN rankings AS T3 ON T2.player_id = T3.player_id WHERE T3.ranking = WTA Championships
extra gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'

medium pred: SELECT T1.first_name, T1.country_code FROM players AS T1    ORDER BY T1.birth_date DESC LIMIT 1
medium gold: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1

medium pred: SELECT T1.first_name, T1.country_code FROM players AS T1    ORDER BY T1.birth_date DESC LIMIT 1
medium gold: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1

medium pred: SELECT T1.first_name, T1.last_name FROM players AS T1     ORDER BY T1.birth_date ASC
medium gold: SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date

medium pred: SELECT T1.first_name, T1.last_name FROM players AS T1 WHERE T1.birth_date = '1'    ORDER BY T1.birth_date ASC
medium gold: SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date

hard pred: SELECT T1.first_name, T1.country_code FROM players AS T1  GROUP BY T1.first_name, T1.country_code  ORDER BY count( *) DESC LIMIT 1
hard gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1

hard pred: SELECT T1.first_name, T1.country_code FROM players AS T1  GROUP BY T1.first_name, T1.country_code  ORDER BY count( *) DESC LIMIT 1
hard gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1

hard pred: SELECT T1.winner_name, T1.winner_rank_points FROM matches AS T1  GROUP BY T1.winner_name, T1.winner_rank_points  ORDER BY count( *) DESC LIMIT 1
hard gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1

eval_err_num:10
could not execute query 'SELECT T1.winner_name FROM matches AS T1 WHERE T1.winner_rank = Australian Open   ORDER BY T1.winner_rank_points DESC LIMIT 1'. Exception: near "Open": syntax error. Database: data/spider/original/database/wta_1/wta_1.sqlite
hard pred: SELECT T1.winner_name FROM matches AS T1 WHERE T1.winner_rank = Australian Open   ORDER BY T1.winner_rank_points DESC LIMIT 1
hard gold: SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1

 45%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                                                                                                                                              | 468/1032 [00:01<00:02, 214.22it/s]medium pred: SELECT T1.first_name, T2.ranking_points FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id█████████████████████████████████████████████████████▉                                                                                                                                                                                                              | 468/1032 [00:01<00:02, 214.22it/s]
medium gold: SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name

medium pred: SELECT T1.tours, count( *) FROM rankings AS T1  GROUP BY T1.tours
medium gold: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date

medium pred: SELECT T1.ranking_date, count( *) FROM rankings AS T1  GROUP BY T1.ranking_date
medium gold: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date

medium pred: SELECT T1.winner_name, T1.winner_rank FROM matches AS T1    ORDER BY T1.winner_age DESC LIMIT 1
medium gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3

medium pred: SELECT T1.winner_name, T1.winner_rank FROM matches AS T1    ORDER BY T1.winner_age ASC LIMIT 1
medium gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3

medium pred: SELECT DISTINCT count(DISTINCT T1.winner_name) FROM matches AS T1 WHERE T1.winner_name = '1'
medium gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'

medium pred: SELECT count( *) FROM matches AS T1 WHERE T1.winner_name = '1'
medium gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'

hard pred: SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id  GROUP BY T2.winner_id  ORDER BY count( *) DESC LIMIT 1
hard gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1

medium pred: SELECT T1.name, T1.tonnage FROM ship AS T1 JOIN battle AS T2 ON T1.lost_in_battle = T2.id     ORDER BY T2.name DESC
medium gold: SELECT name ,  tonnage FROM ship ORDER BY name DESC

medium pred: SELECT T1.name, T1.date, T1.result FROM battle AS T1
medium gold: SELECT name ,  date FROM battle

medium pred: SELECT max( T1.killed), min( T1.killed), T1.killed FROM death AS T1  GROUP BY T1.killed
medium gold: SELECT max(killed) ,  min(killed) FROM death

easy pred: SELECT T1.id, avg( T1.injured) FROM death AS T1  GROUP BY T1.id
easy gold: SELECT avg(injured) FROM death

extra pred: SELECT T1.id, T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id  GROUP BY T2.caused_by_ship_id  ORDER BY sum( T2.injured) DESC LIMIT 1
extra gold: SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1

eval_err_num:11
could not execute query 'SELECT T1.name, T1.result, T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.lost_in_battle = English Channel       EXCEPT SELECT T3.name, T3.bulgarian_commander, T3.bulgarian_commander FROM battle AS T3 JOIN ship AS T4 ON T3.id = T4.lost_in_battle WHERE T4.lost_in_battle = English Channel'. Exception: near "Channel": syntax error. Database: data/spider/original/database/battle_death/battle_death.sqlite
extra pred: SELECT T1.name, T1.result, T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.lost_in_battle = English Channel       EXCEPT SELECT T3.name, T3.bulgarian_commander, T3.bulgarian_commander FROM battle AS T3 JOIN ship AS T4 ON T3.id = T4.lost_in_battle WHERE T4.lost_in_battle = English Channel
extra gold: SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'

medium pred: SELECT T1.note FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.location like '%East%'
medium gold: SELECT note FROM death WHERE note LIKE '%East%'

medium pred: SELECT T1.line_1, T1.line_2 FROM Addresses AS T1 WHERE T1.line_3 = '1'
medium gold: SELECT line_1 ,  line_2 FROM addresses

medium pred: SELECT T1.line_1, T1.line_3 FROM Addresses AS T1
medium gold: SELECT line_1 ,  line_2 FROM addresses

easy pred: SELECT T1.course_name FROM Courses AS T1 WHERE T1.course_description = 'math'
easy gold: SELECT course_description FROM Courses WHERE course_name  =  'math'

easy pred: SELECT count( *) FROM Addresses AS T1
easy gold: SELECT count(DISTINCT department_id) FROM Degree_Programs

easy pred: SELECT count( *) FROM Addresses AS T1
easy gold: SELECT count(DISTINCT department_id) FROM Degree_Programs

easy pred: SELECT DISTINCT count(DISTINCT T1.degree_program_id) FROM Degree_Programs AS T1
easy gold: SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs

medium pred: SELECT count( *), T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = '1' GROUP BY T1.department_id
medium gold: SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'

 51%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                                                                                                                          | 524/1032 [00:05<00:13, 36.63it/s]medium pred: SELECT T1.course_name, T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id  GROUP BY T2.course_id HAVING count( *) < 2██████████████████████████████████▉                                                                                                                                                                                          | 524/1032 [00:05<00:13, 36.63it/s]
medium gold: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2

medium pred: SELECT T1.department_description FROM Departments AS T1 WHERE T1.department_name like '%1%'
medium gold: SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'

medium pred: SELECT T1.department_description FROM Departments AS T1 WHERE T1.department_name like '%1%'
medium gold: SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'

medium pred: SELECT T1.first_name, T1.middle_name, T1.last_name, T2.degree_program_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id  GROUP BY T2.student_id HAVING count( *) = 2
medium gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2

medium pred: SELECT T1.first_name, T1.middle_name, T2.student_id, T2.degree_program_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id  GROUP BY T2.student_id HAVING count( *) = 2
medium gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2

eval_err_num:12
could not execute query 'SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T2.degree_program_id = Bachelor'. Exception: no such column: Bachelor. Database: data/spider/original/database/student_transcripts_tracking/student_transcripts_tracking.sqlite
hard pred: SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T2.degree_program_id = Bachelor
hard gold: SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'

hard pred: SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T13 ON T1.student_id = T13.student_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T2 ON T14.course_id = T2.course_id WHERE T2.course_name = 'Bachelor'
hard gold: SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'

extra pred: SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T13 ON T1.course_id = T13.course_id JOIN Student_Enrolment AS T14 ON T13.student_enrolment_id = T14.student_enrolment_id JOIN Students AS T2 ON T14.student_id = T2.student_id  GROUP BY T1.course_name  ORDER BY count( *) DESC LIMIT 1
extra gold: SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT T1.student_id, T1.student_enrolment_id FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id  GROUP BY T1.student_id  ORDER BY count( *) DESC LIMIT 1
extra gold: SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1

easy pred: SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id
easy gold: SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id

extra pred: SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id  GROUP BY T2.course_id  ORDER BY count( *) DESC LIMIT 1
extra gold: SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T3 ON T1.course_id = T3.course_id JOIN Student_Enrolment AS T14 ON T3.student_enrolment_id = T14.student_enrolment_id JOIN Students AS T2 ON T14.student_id = T2.student_id  GROUP BY T3.course_id  ORDER BY count( *) DESC LIMIT 1
extra gold: SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT count( *) FROM Addresses AS T1
extra gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id

extra pred: SELECT count( *) FROM Addresses AS T1
extra gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id

medium pred: SELECT T1.cell_mobile_number FROM Students AS T1 WHERE T1.first_name = 'Ward'
medium gold: SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'

easy pred: SELECT DISTINCT T1.first_name FROM Students AS T1
easy gold: SELECT first_name FROM Students WHERE current_address_id != permanent_address_id

easy pred: SELECT DISTINCT T1.first_name FROM Students AS T1 WHERE T1.permanent_address_id < (SELECT min( T22.permanent_address_id) FROM Students AS T22        )
easy gold: SELECT first_name FROM Students WHERE current_address_id != permanent_address_id

extra pred: SELECT T1.address_id, T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id  GROUP BY T2.permanent_address_id  ORDER BY count( *) DESC LIMIT 1
extra gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT T1.address_id, T1.line_1, T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id  GROUP BY T2.permanent_address_id  ORDER BY count( *) DESC LIMIT 1
extra gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1

medium pred: SELECT T1.transcript_date, T2.date_first_registered FROM Transcripts AS T1 JOIN Transcript_Contents AS T13 ON T1.transcript_id = T13.transcript_id JOIN Student_Enrolment_Courses AS T14 ON T13.student_course_id = T14.student_course_id JOIN Student_Enrolment AS T15 ON T14.student_enrolment_id = T15.student_enrolment_id JOIN Students AS T2 ON T15.student_id = T2.student_id    ORDER BY T1.transcript_date ASC LIMIT 1
medium gold: SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1

hard pred: SELECT T1.course_id, count( *) FROM Student_Enrolment_Courses AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id  GROUP BY T1.course_id  ORDER BY count( *) DESC LIMIT 1
hard gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1

hard pred: SELECT max( T1.course_id), count( *) FROM Student_Enrolment_Courses AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id
hard gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1

eval_err_num:13
could not execute query 'SELECT T1.semester_name FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.student_enrolment_id = Bachelor     INTERSECT SELECT T3.semester_name FROM Semesters AS T3 JOIN Student_Enrolment AS T15 ON T3.semester_id = T15.semester_id JOIN Student_Enrolment_Courses AS T16 ON T15.student_enrolment_id = T16.student_enrolment_id JOIN Courses AS T4 ON T16.course_id = T4.course_id WHERE T4.course_name = 'Bachelor''. Exception: no such column: Bachelor. Database: data/spider/original/database/student_transcripts_tracking/student_transcripts_tracking.sqlite
extra pred: SELECT T1.semester_name FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.student_enrolment_id = Bachelor     INTERSECT SELECT T3.semester_name FROM Semesters AS T3 JOIN Student_Enrolment AS T15 ON T3.semester_id = T15.semester_id JOIN Student_Enrolment_Courses AS T16 ON T15.student_enrolment_id = T16.student_enrolment_id JOIN Courses AS T4 ON T16.course_id = T4.course_id WHERE T4.course_name = 'Bachelor'
extra gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'

eval_err_num:14
could not execute query 'SELECT T1.semester_id FROM Student_Enrolment AS T1 WHERE T1.degree_program_id = Bachelor     INTERSECT SELECT T2.semester_id FROM Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T14 ON T2.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T3 ON T14.course_id = T3.course_id WHERE T3.course_name = 'Bachelor''. Exception: no such column: Bachelor. Database: data/spider/original/database/student_transcripts_tracking/student_transcripts_tracking.sqlite
extra pred: SELECT T1.semester_id FROM Student_Enrolment AS T1 WHERE T1.degree_program_id = Bachelor     INTERSECT SELECT T2.semester_id FROM Student_Enrolment AS T2 JOIN Student_Enrolment_Courses AS T14 ON T2.student_enrolment_id = T14.student_enrolment_id JOIN Courses AS T3 ON T14.course_id = T3.course_id WHERE T3.course_name = 'Bachelor'
extra gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'

easy pred: SELECT DISTINCT count(DISTINCT T1.address_id) FROM Addresses AS T1
easy gold: SELECT count(DISTINCT current_address_id) FROM Students

easy pred: SELECT DISTINCT T1.address_id FROM Addresses AS T1
easy gold: SELECT count(DISTINCT current_address_id) FROM Students

easy pred: SELECT T1.other_details FROM Student_Enrolment AS T1     ORDER BY T1.other_details DESC
easy gold: SELECT other_student_details FROM Students ORDER BY other_student_details DESC

easy pred: SELECT T1.section_name FROM Sections AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id WHERE T2.course_name = '1'
easy gold: SELECT section_description FROM Sections WHERE section_name  =  'h'

easy pred: SELECT T1.section_description FROM Sections AS T1 WHERE T1.section_name = '1'
easy gold: SELECT section_description FROM Sections WHERE section_name  =  'h'

extra pred: SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = 'Haiti' or T2.state_province_county = '09700166582'
extra gold: SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'

extra pred: SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.city = 'Haiti' or T1.cell_mobile_number = '09700166582'
extra gold: SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'

easy pred: SELECT T1.Directed_by FROM Cartoon AS T1 WHERE T1.Written_by = 'Ben Jones'
easy gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";

easy pred: SELECT T1.Directed_by FROM Cartoon AS T1 WHERE T1.Written_by = 'Ben Jones'
easy gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";

easy pred: SELECT count( *) FROM Cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr' and T1.Directed_by = 'Joseph Kuhr'
easy gold: SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";

medium pred: SELECT T1.Title, T1.Directed_by FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel     ORDER BY T2.Air_Date ASC
medium gold: SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date

medium pred: SELECT T1.Title, T1.Directed_by FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel     ORDER BY T2.Air_Date ASC
medium gold: SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date

medium pred: SELECT DISTINCT count(DISTINCT T1.series_name), T1.Content FROM TV_Channel AS T1  GROUP BY T1.Content
medium gold: SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;

easy pred: SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Sky Radio'
easy gold: SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";

easy pred: SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Sky Radio'
easy gold: SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";

medium pred: SELECT T1.Channel FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'The Rise of the Blue Beetle!'
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";

medium pred: SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle'
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";

medium pred: SELECT T1.Episode, T1.Rating FROM TV_series AS T1    ORDER BY T1.Rating DESC LIMIT 1
medium gold: SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;

medium pred: SELECT T1.Episode, T1.Rating FROM TV_series AS T1    ORDER BY T1.Rating DESC LIMIT 1
medium gold: SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;

 60%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                                                        | 615/1032 [00:05<00:08, 51.44it/s]medium pred: SELECT min( T1.Share), max( T1.Share) FROM TV_series AS T1███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                                                        | 615/1032 [00:05<00:08, 51.44it/s]
medium gold: SELECT max(SHARE) , min(SHARE) FROM TV_series;

easy pred: SELECT T1.Air_Date FROM TV_series AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN Cartoon AS T2 ON T13.id = T2.Channel WHERE T2.Title = 'A Love of a Lifetime'
easy gold: SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";

easy pred: SELECT T1.Weekly_Rank FROM TV_series AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN Cartoon AS T2 ON T13.id = T2.Channel WHERE T2.Title = 'A Love of a Lifetime'
easy gold: SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";

medium pred: SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'A Love of a Lifetime'
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";

medium pred: SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1 JOIN TV_Channel AS T13 ON T1.Channel = T13.id JOIN TV_series AS T2 ON T13.id = T2.Channel    ORDER BY T2.Air_Date DESC LIMIT 1
medium gold: SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1

medium pred: SELECT T1.Production_code, T1.Channel FROM Cartoon AS T1    ORDER BY T1.Channel DESC LIMIT 1
medium gold: SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1

medium pred: SELECT T1.Channel, T2.series_name FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Hight_definition_TV = '1'
medium gold: SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"

medium pred: SELECT T1.Package_Option, T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = '1'
medium gold: SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"

extra pred: SELECT count( *) FROM TV_Channel AS T1
extra gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'

easy pred: SELECT T1.id FROM TV_Channel AS T1  GROUP BY T1.id HAVING count( *) > 2
easy gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2

easy pred: SELECT T1.id FROM TV_Channel AS T1  GROUP BY T1.id HAVING count( *) > 2
easy gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2

hard pred: SELECT T1.Package_Option FROM TV_Channel AS T1        EXCEPT SELECT T2.Package_Option FROM TV_Channel AS T2 JOIN Cartoon AS T3 ON T2.id = T3.Channel WHERE T3.Directed_by = 'Ben Jones'
hard gold: SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')

hard pred: SELECT T1.Package_Option FROM TV_Channel AS T1        EXCEPT SELECT T2.Package_Option FROM TV_Channel AS T2 JOIN Cartoon AS T3 ON T2.id = T3.Channel WHERE T3.Directed_by = 'Ben Jones'
hard gold: SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')

easy pred: SELECT T1.Name FROM people AS T1
easy gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID

medium pred: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T2.People_ID   ORDER BY count( *) ASC
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made

hard pred: SELECT count( *) FROM poker_player AS T1
hard gold: SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)

easy pred: SELECT DISTINCT count(DISTINCT T1.state) FROM AREA_CODE_STATE AS T1
easy gold: SELECT count(*) FROM area_code_state

extra pred: SELECT T1.area_code FROM AREA_CODE_STATE AS T1    ORDER BY T1.area_code DESC LIMIT 1
extra gold: SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1

eval_err_num:15
could not execute query 'SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T13 ON T1.state = T13.state JOIN CONTESTANTS AS T2 ON T13.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' and T2.contestant_number = Kelly Clauss     INTERSECT SELECT T3.area_code FROM AREA_CODE_STATE AS T3 JOIN VOTES AS T15 ON T3.state = T15.state JOIN CONTESTANTS AS T4 ON T15.contestant_number = T4.contestant_number WHERE T4.contestant_name = 'Kelly Clauss' and T4.contestant_name = 'Kelly Clauss''. Exception: near "Clauss": syntax error. Database: data/spider/original/database/voter_1/voter_1.sqlite
extra pred: SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T13 ON T1.state = T13.state JOIN CONTESTANTS AS T2 ON T13.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' and T2.contestant_number = Kelly Clauss     INTERSECT SELECT T3.area_code FROM AREA_CODE_STATE AS T3 JOIN VOTES AS T15 ON T3.state = T15.state JOIN CONTESTANTS AS T4 ON T15.contestant_number = T4.contestant_number WHERE T4.contestant_name = 'Kelly Clauss' and T4.contestant_name = 'Kelly Clauss'
extra gold: SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'

easy pred: SELECT T1.Name FROM country AS T1 WHERE T1.GovernmentForm > '1950'
easy gold: SELECT Name FROM country WHERE IndepYear  >  1950

easy pred: SELECT T1.Name FROM country AS T1 WHERE T1.Name > '1950'
easy gold: SELECT Name FROM country WHERE IndepYear  >  1950

easy pred: SELECT sum( T1.SurfaceArea) FROM sqlite_sequence AS T2 JOIN country AS T1 WHERE T2.seq = 'Caribbean'
easy gold: SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"

medium pred: SELECT T1.Region FROM sqlite_sequence AS T2 JOIN country AS T1 WHERE T2.seq = 'Kabul'
medium gold: SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"

medium pred: SELECT T1.Region FROM sqlite_sequence AS T2 JOIN country AS T1 WHERE T2.seq = 'Kabul'
medium gold: SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"

extra pred: SELECT T1.Language FROM countrylanguage AS T1  GROUP BY T1.Language  ORDER BY count( *) DESC LIMIT 1
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1

extra pred: SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'Aruba'
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1

medium pred: SELECT T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Brazil'
medium gold: SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"

medium pred: SELECT T1.Population, T1.LifeExpectancy FROM country AS T1
medium gold: SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"

easy pred: SELECT T1.LifeExpectancy FROM country AS T1 WHERE T1.Region = 'Central Africa'
easy gold: SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"

hard pred: SELECT T1.Name FROM country AS T1    ORDER BY T1.LifeExpectancy ASC LIMIT 1
hard gold: SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1

hard pred: SELECT T1.Name FROM country AS T1    ORDER BY T1.LifeExpectancy ASC LIMIT 1
hard gold: SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1

medium pred: SELECT sum( T1.Population), max( T1.GNP) FROM country AS T1 WHERE T1.Region = 'Asia'
medium gold: SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"

medium pred: SELECT count( *), T1.Region FROM country AS T1  GROUP BY T1.Region  ORDER BY T1.GNP DESC LIMIT 1
medium gold: SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"

medium pred: SELECT avg( T1.LifeExpectancy) FROM country AS T1 WHERE T1.Region = 'Republic'
medium gold: SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"

medium pred: SELECT avg( T1.LifeExpectancy) FROM country AS T1 WHERE T1.Region = 'Africa'
medium gold: SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"

medium pred: SELECT sum( T1.SurfaceArea) FROM country AS T1 WHERE T1.Continent = 'Asia'
medium gold: SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"

medium pred: SELECT sum( T1.SurfaceArea) FROM country AS T1 WHERE T1.Region = 'Asia' or T1.Region = 'ARE'
medium gold: SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"

easy pred: SELECT count( *) FROM city AS T1 WHERE T1.District = 'Gelderland'
easy gold: SELECT sum(Population) FROM city WHERE District  =  "Gelderland"

easy pred: SELECT sum( T1.Population) FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.District = 'Gelderland'
easy gold: SELECT sum(Population) FROM city WHERE District  =  "Gelderland"

medium pred: SELECT avg( T1.GNP), avg( T1.Population) FROM country AS T1 WHERE T1.GovernmentForm = 'USA'
medium gold: SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"

medium pred: SELECT avg( T1.GNP), sum( T1.Population) FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.CountryCode = 'USA'
medium gold: SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"

 71%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                              | 730/1032 [00:06<00:04, 72.09it/s]medium pred: SELECT count( *) FROM countrylanguage AS T1 WHERE T1.Language = 'Aruba'████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                              | 730/1032 [00:06<00:04, 72.09it/s]
medium gold: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"

medium pred: SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN city AS T2 ON T13.Code = T2.CountryCode WHERE T2.Name = 'Aruba'
medium gold: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"

medium pred: SELECT count( *) FROM country AS T1 WHERE T1.Region = '1'
medium gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"

medium pred: SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Region = '1'
medium gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"

extra pred: SELECT T1.Name FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode JOIN countrylanguage AS T3 ON T1.Code = T3.CountryCode  GROUP BY T3.CountryCode  ORDER BY count( *) DESC LIMIT 1
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1

extra pred: SELECT T1.Name FROM country AS T1  GROUP BY T1.Name  ORDER BY count( *) DESC LIMIT 1
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1

easy pred: SELECT count( *) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English'
easy gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")

easy pred: SELECT count( *) FROM countrylanguage AS T1 WHERE T1.Language = 'English'
easy gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")

extra pred: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = '1'     INTERSECT SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.Language = '1'
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"

extra pred: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = '1'     INTERSECT SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.Language = '1'
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"

medium pred: SELECT count( *) FROM countrylanguage AS T1 WHERE T1.Language = 'Chinese'
medium gold: SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"

hard pred: SELECT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' or T2.Language = 'Dutch'
hard gold: SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"

hard pred: SELECT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' or T2.Language = 'English'
hard gold: SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"

extra pred: SELECT T1.CountryCode FROM city AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN countrylanguage AS T2 ON T13.Code = T2.CountryCode WHERE T2.Language = '1' or T2.Language = '1'
extra gold: SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"

extra pred: SELECT T1.CountryCode FROM city AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN countrylanguage AS T2 ON T13.Code = T2.CountryCode WHERE T2.Language = '1' or T2.Language = '1'
extra gold: SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"

extra pred: SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia' GROUP BY T1.CountryCode  ORDER BY count( *) DESC LIMIT 1
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1

extra pred: SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN city AS T2 ON T13.Code = T2.CountryCode  GROUP BY T1.Language  ORDER BY count( *) DESC LIMIT 1
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1

eval_err_num:16
could not execute query 'SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code  GROUP BY T1.CountryCode HAVING count( *) = Republic'. Exception: no such column: Republic. Database: data/spider/original/database/world_1/world_1.sqlite
hard pred: SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code  GROUP BY T1.CountryCode HAVING count( *) = Republic
hard gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1

hard pred: SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm = 'Republic'
hard gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1

extra pred: SELECT T1.Name FROM city AS T1    ORDER BY T1.Population DESC LIMIT 1
extra gold: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1

extra pred: SELECT T1.Population FROM city AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN countrylanguage AS T2 ON T13.Code = T2.CountryCode WHERE T2.Language = 'English' GROUP BY T1.Population  ORDER BY count( *) DESC LIMIT 1
extra gold: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1

hard pred: SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1    ORDER BY T1.SurfaceArea DESC LIMIT 1
hard gold: SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1

hard pred: SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1    ORDER BY T1.LifeExpectancy DESC LIMIT 1
hard gold: SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1

extra pred: SELECT avg( T1.LifeExpectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != '1'
extra gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")

extra pred: SELECT avg( T1.LifeExpectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != '1'
extra gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")

extra pred: SELECT count( *) FROM countrylanguage AS T1 WHERE T1.Language != 'English'
extra gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")

extra pred: SELECT count( *) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'English'
extra gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")

medium pred: SELECT T1.Language FROM countrylanguage AS T1 WHERE T1.IsOfficial = '1'
medium gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"

medium pred: SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.HeadOfState = '1'
medium gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"

medium pred: SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 WHERE T1.IsOfficial < '1'
medium gold: SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"

medium pred: SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 WHERE T1.IsOfficial < '1'
medium gold: SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"

hard pred: SELECT T1.Name FROM country AS T1 WHERE T1.SurfaceArea > (SELECT max( T22.SurfaceArea) FROM country AS T22 WHERE T22.Region = 'Europe'       )
hard gold: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")

hard pred: SELECT T1.Name FROM country AS T1 WHERE T1.SurfaceArea > (SELECT max( T22.SurfaceArea) FROM country AS T22 WHERE T22.Region = 'Europe'       )
hard gold: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")

extra pred: SELECT T1.Name FROM country AS T1 WHERE T1.Population < (SELECT max( T22.Population) FROM country AS T22 WHERE T22.Region = 'AIA'       )
extra gold: SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  "Asia")

extra pred: SELECT T1.Region FROM country AS T1 WHERE T1.Population < (SELECT min( T22.Population) FROM country AS T22 WHERE T22.Continent = 'Africa'       )
extra gold: SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  "Asia")

extra pred: SELECT T1.Region FROM country AS T1 WHERE T1.Population > (SELECT max( T22.Population) FROM country AS T22 WHERE T22.Region = 'Arica'       )
extra gold: SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  "Africa")

extra pred: SELECT T1.Name FROM country AS T1 WHERE T1.Population > (SELECT max( T22.Population) FROM country AS T22 WHERE T22.Region = 'Arica'       )
extra gold: SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  "Africa")

hard pred: SELECT T1.CountryCode FROM city AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN countrylanguage AS T2 ON T13.Code = T2.CountryCode WHERE T2.Language != 'English'
hard gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"

hard pred: SELECT T1.CountryCode FROM city AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN countrylanguage AS T2 ON T13.Code = T2.CountryCode WHERE T2.Language != 'English'
hard gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"

easy pred: SELECT T1.CountryCode FROM city AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN countrylanguage AS T2 ON T13.Code = T2.CountryCode WHERE T2.Language != 'English'
easy gold: SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"

easy pred: SELECT T1.CountryCode FROM city AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN countrylanguage AS T2 ON T13.Code = T2.CountryCode WHERE T2.Language != 'English'
easy gold: SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"

hard pred: SELECT T1.CountryCode FROM city AS T1 JOIN country AS T3 ON T1.CountryCode = T3.Code JOIN countrylanguage AS T2 ON T3.Code = T2.CountryCode WHERE T2.Language = 'English' and T3.GovernmentForm != 'Republic'
hard gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"

hard pred: SELECT T1.CountryCode FROM city AS T1 JOIN country AS T3 ON T1.CountryCode = T3.Code JOIN countrylanguage AS T2 ON T3.Code = T2.CountryCode WHERE T2.Language = 'English' and T3.GovernmentForm != 'Republic'
hard gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"

extra pred: SELECT T1.Name FROM city AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN countrylanguage AS T2 ON T13.Code = T2.CountryCode WHERE T2.Language != '1'
extra gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')

extra pred: SELECT T1.Name FROM city AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN countrylanguage AS T2 ON T13.Code = T2.CountryCode WHERE T2.Language != '1'
extra gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')

hard pred: SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN countrylanguage AS T2 ON T13.Code = T2.CountryCode WHERE T2.Language = '1' and T2.IsOfficial = '1'
hard gold: SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  "Asia"

hard pred: SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN countrylanguage AS T2 ON T13.Code = T2.CountryCode WHERE T2.Language = '1'
hard gold: SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  "Asia"

medium pred: SELECT T1.Name, T1.SurfaceArea, T1.Population FROM country AS T1    ORDER BY T1.SurfaceArea ASC LIMIT 1
medium gold: SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1

medium pred: SELECT T1.Name, T1.SurfaceArea, T1.Population FROM country AS T1    ORDER BY T1.SurfaceArea ASC LIMIT 1
medium gold: SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1

medium pred: SELECT T1.Name, count( *) FROM country AS T1  GROUP BY T1.Name HAVING count( *) >= 3
medium gold: SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >=  3

medium pred: SELECT T1.Name, count( *) FROM country AS T1  GROUP BY T1.Name HAVING count( *) > 2
medium gold: SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2

eval_err_num:17
could not execute query 'SELECT avg( T1.LifeExpectancy), avg( T1.Population), min( T1.LifeExpectancy) FROM country AS T1   HAVING avg( T1.LifeExpectancy) < 72'. Exception: a GROUP BY clause is required before HAVING. Database: data/spider/original/database/world_1/world_1.sqlite
medium pred: SELECT avg( T1.LifeExpectancy), avg( T1.Population), min( T1.LifeExpectancy) FROM country AS T1   HAVING avg( T1.LifeExpectancy) < 72
medium gold: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72

medium pred: SELECT T1.Continent, sum( T1.LifeExpectancy), avg( T1.LifeExpectancy) FROM country AS T1  GROUP BY T1.Continent HAVING avg( T1.LifeExpectancy) < 72
medium gold: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72

medium pred: SELECT T1.Name, T1.SurfaceArea FROM country AS T1    ORDER BY T1.SurfaceArea DESC LIMIT 1
medium gold: SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5

medium pred: SELECT T1.Name, T1.SurfaceArea FROM country AS T1    ORDER BY T1.SurfaceArea DESC LIMIT 1
medium gold: SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5

medium pred: SELECT T1.Name FROM country AS T1    ORDER BY T1.Population DESC LIMIT 1
medium gold: SELECT Name FROM country ORDER BY Population DESC LIMIT 3

medium pred: SELECT T1.Name FROM country AS T1    ORDER BY T1.Population DESC LIMIT 1
medium gold: SELECT Name FROM country ORDER BY Population DESC LIMIT 3

medium pred: SELECT T1.Name FROM country AS T1    ORDER BY T1.Population ASC LIMIT 1
medium gold: SELECT Name FROM country ORDER BY Population ASC LIMIT 3

 78%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                    | 803/1032 [00:06<00:02, 93.79it/s]medium pred: SELECT T1.Name FROM country AS T1  GROUP BY T1.Name  ORDER BY count( *) ASC LIMIT 1███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                    | 803/1032 [00:06<00:02, 93.79it/s]
medium gold: SELECT Name FROM country ORDER BY Population ASC LIMIT 3

easy pred: SELECT count( *) FROM country AS T1 WHERE T1.Region = 'Asia'
easy gold: SELECT count(*) FROM country WHERE continent  =  "Asia"

easy pred: SELECT count( *) FROM country AS T1 WHERE T1.Region = 'Asia'
easy gold: SELECT count(*) FROM country WHERE continent  =  "Asia"

medium pred: SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population > 80000
medium gold: SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"

hard pred: SELECT sum( T1.Population), avg( T1.SurfaceArea) FROM country AS T1 WHERE T1.Continent > 'North America'
hard gold: SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  "North America" AND SurfaceArea  >  3000

hard pred: SELECT sum( T1.Population), avg( T1.SurfaceArea) FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T1.SurfaceArea > 3000
hard gold: SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  "North America" AND SurfaceArea  >  3000

eval_err_num:18
could not execute query 'SELECT T1.Name FROM city AS T1 WHERE T1.Population between Nîmes AND 900000'. Exception: no such column: Nîmes. Database: data/spider/original/database/world_1/world_1.sqlite
easy pred: SELECT T1.Name FROM city AS T1 WHERE T1.Population between Nîmes AND 900000
easy gold: SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000

hard pred: SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code  GROUP BY T1.CountryCode  ORDER BY count( *) DESC LIMIT 1
hard gold: SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1

hard pred: SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code  GROUP BY T1.CountryCode  ORDER BY count( *) DESC LIMIT 1
hard gold: SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1

medium pred: SELECT T1.Language, max( T1.Percentage) FROM countrylanguage AS T1  GROUP BY T1.Language
medium gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode

medium pred: SELECT T1.CountryCode, count( *) FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code  GROUP BY T1.CountryCode
medium gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode

extra pred: SELECT count( *) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode    ORDER BY T2.Percentage DESC LIMIT 1
extra gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode

extra pred: SELECT count( *) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Spanish'
extra gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode

medium pred: SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Percentage = (SELECT T23.Percentage FROM countrylanguage AS T23    ORDER BY T23.Percentage DESC LIMIT 1    )
medium gold: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode

medium pred: SELECT T1.CountryCode FROM city AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN countrylanguage AS T2 ON T13.Code = T2.CountryCode WHERE T2.Language = 'Spanish'
medium gold: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode

medium pred: SELECT count( *) FROM conductor AS T1
medium gold: SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID

medium pred: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID
medium gold: SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID

hard pred: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Orchestra_ID NOT IN (SELECT T23.Orchestra_ID FROM performance AS T23        )
hard gold: SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)

easy pred: SELECT DISTINCT T1.grade FROM Highschooler AS T1
easy gold: SELECT grade FROM Highschooler

easy pred: SELECT DISTINCT T1.grade FROM Highschooler AS T1
easy gold: SELECT grade FROM Highschooler

eval_err_num:19
could not execute query 'SELECT DISTINCT T1.grade FROM Highschooler AS T1 WHERE T1.name = 'Kyle' and T1.grade = Kyle'. Exception: no such column: Kyle. Database: data/spider/original/database/network_1/network_1.sqlite
easy pred: SELECT DISTINCT T1.grade FROM Highschooler AS T1 WHERE T1.name = 'Kyle' and T1.grade = Kyle
easy gold: SELECT grade FROM Highschooler WHERE name  =  "Kyle"

could not execute query 'SELECT DISTINCT T1.grade, count(DISTINCT *) FROM Highschooler AS T1  GROUP BY T1.grade'. Exception: near "*": syntax error. Database: data/spider/original/database/network_1/network_1.sqlite
medium pred: SELECT DISTINCT T1.grade, count(DISTINCT *) FROM Highschooler AS T1  GROUP BY T1.grade
medium gold: SELECT grade ,  count(*) FROM Highschooler GROUP BY grade

could not execute query 'SELECT DISTINCT count(DISTINCT T1.grade), count(DISTINCT *) FROM Highschooler AS T1'. Exception: near "*": syntax error. Database: data/spider/original/database/network_1/network_1.sqlite
medium pred: SELECT DISTINCT count(DISTINCT T1.grade), count(DISTINCT *) FROM Highschooler AS T1
medium gold: SELECT grade ,  count(*) FROM Highschooler GROUP BY grade

medium pred: SELECT count( *), T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.ID  GROUP BY T2.name
medium gold: SELECT student_id ,  count(*) FROM Friend GROUP BY student_id

medium pred: SELECT T1.name, count( *) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id  GROUP BY T1.name
medium gold: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id

medium pred: SELECT count( *), T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.ID  GROUP BY T2.name
medium gold: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id

extra pred: SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id  GROUP BY T2.friend_id  ORDER BY count( *) DESC LIMIT 1
extra gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id  GROUP BY T2.friend_id  ORDER BY count( *) DESC LIMIT 1
extra gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

medium pred: SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id  GROUP BY T2.friend_id HAVING count( *) >= 3
medium gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3

medium pred: SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id  GROUP BY T2.friend_id HAVING count( *) >= 3
medium gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3

hard pred: SELECT T1.name FROM Highschooler AS T1 WHERE T1.name = 'Kyle'
hard gold: SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"

eval_err_num:20
could not execute query 'SELECT T1.name FROM Highschooler AS T1 WHERE T1.name = 'Kyle' and T1.grade = Kyle'. Exception: no such column: Kyle. Database: data/spider/original/database/network_1/network_1.sqlite
hard pred: SELECT T1.name FROM Highschooler AS T1 WHERE T1.name = 'Kyle' and T1.grade = Kyle
hard gold: SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"

eval_err_num:21
could not execute query 'SELECT count( *) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.ID WHERE T2.name = 'Kyle' and T2.grade = Kyle'. Exception: no such column: Kyle. Database: data/spider/original/database/network_1/network_1.sqlite
medium pred: SELECT count( *) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.ID WHERE T2.name = 'Kyle' and T2.grade = Kyle
medium gold: SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"

medium pred: SELECT count( *) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.ID WHERE T2.name = 'Kyle'
medium gold: SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"

hard pred: SELECT count( *) FROM Highschooler AS T1
hard gold: SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend

hard pred: SELECT T1.name FROM Highschooler AS T1        EXCEPT SELECT T2.name FROM Highschooler AS T2 JOIN Friend AS T3 ON T2.ID = T3.friend_id
hard gold: SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id

hard pred: SELECT T1.name FROM Highschooler AS T1        EXCEPT SELECT T2.name FROM Highschooler AS T2 JOIN Friend AS T3 ON T2.ID = T3.friend_id
hard gold: SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id

hard pred: SELECT count( *) FROM Highschooler AS T1
hard gold: SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes

hard pred: SELECT T1.ID FROM Highschooler AS T1      INTERSECT SELECT T2.student_id FROM Friend AS T2
hard gold: SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes

hard pred: SELECT T1.name FROM Highschooler AS T1      INTERSECT SELECT T2.name FROM Highschooler AS T2
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id

hard pred: SELECT count( *) FROM Highschooler AS T1
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id

medium pred: SELECT T1.name, count( *) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name
medium gold: SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id

medium pred: SELECT count( *), T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID  GROUP BY T2.name
medium gold: SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id

eval_err_num:22
could not execute query 'SELECT T1.name FROM Highschooler AS T1 WHERE T1.grade > 5     INTERSECT SELECT T2.name FROM Highschooler AS T2 JOIN Friend AS T3 ON T2.ID = T3.friend_id  GROUP BY T2.friend_id HAVING count( *) >= 2'. Exception: no such column: T2.friend_id. Database: data/spider/original/database/network_1/network_1.sqlite
hard pred: SELECT T1.name FROM Highschooler AS T1 WHERE T1.grade > 5     INTERSECT SELECT T2.name FROM Highschooler AS T2 JOIN Friend AS T3 ON T2.ID = T3.friend_id  GROUP BY T2.friend_id HAVING count( *) >= 2
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2

 88%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                             | 909/1032 [00:06<00:00, 129.08it/s]hard pred: SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id WHERE T1.grade > 5 GROUP BY T2.friend_id HAVING count( *) >= 2███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                             | 909/1032 [00:06<00:00, 129.08it/s]
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2

hard pred: SELECT DISTINCT avg(DISTINCT T1.grade) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id
hard gold: SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)

hard pred: SELECT DISTINCT avg(DISTINCT T1.grade) FROM Highschooler AS T1
hard gold: SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)

hard pred: SELECT count( *) FROM Breeds AS T1
hard gold: SELECT state FROM Owners INTERSECT SELECT state FROM Professionals

hard pred: SELECT T1.state FROM Owners AS T1      INTERSECT SELECT T2.state FROM Professionals AS T2 JOIN Treatments AS T14 ON T2.professional_id = T14.professional_id JOIN Dogs AS T15 ON T14.dog_id = T15.dog_id JOIN Owners AS T3 ON T15.owner_id = T3.owner_id
hard gold: SELECT state FROM Owners INTERSECT SELECT state FROM Professionals

hard pred: SELECT avg( T1.age) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id
hard gold: SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )

hard pred: SELECT avg( T1.age) FROM Dogs AS T1
hard gold: SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )

extra pred: SELECT T1.professional_id, T1.last_name, T1.home_phone FROM Professionals AS T1 WHERE T1.state = 'Indiana'      UNION SELECT T2.professional_id, T2.last_name, T2.last_name FROM Professionals AS T2 JOIN Treatments AS T3 ON T2.professional_id = T3.professional_id  GROUP BY T2.professional_id HAVING count( *) > 2
extra gold: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2

extra pred: SELECT T1.professional_id, T1.last_name, T1.home_phone FROM Professionals AS T1 WHERE T1.state = 'Indiana'      UNION SELECT T2.professional_id, T2.last_name, T2.last_name FROM Professionals AS T2 JOIN Treatments AS T3 ON T2.professional_id = T3.professional_id  GROUP BY T2.professional_id HAVING count( *) > 2
extra gold: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2

hard pred: SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code WHERE T2.dog_id NOT IN (SELECT T23.dog_id FROM Treatments AS T23        )
hard gold: SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )

hard pred: SELECT T1.name FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id JOIN Charges AS T3  GROUP BY T1.name HAVING sum( T3.charge_amount) > 1000
hard gold: SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )

hard pred: SELECT T1.first_name FROM Professionals AS T1 JOIN Treatments AS T14 ON T1.professional_id = T14.professional_id JOIN Dogs AS T3 ON T14.dog_id = T3.dog_id JOIN Owners AS T2 ON T3.owner_id = T2.owner_id WHERE T2.first_name = '1' or T3.name = '1'       EXCEPT SELECT T4.first_name FROM Professionals AS T4 JOIN Treatments AS T16 ON T4.professional_id = T16.professional_id JOIN Dogs AS T17 ON T16.dog_id = T17.dog_id JOIN Owners AS T5 ON T17.owner_id = T5.owner_id
hard gold: SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs

hard pred: SELECT T1.first_name FROM Professionals AS T1 JOIN Treatments AS T13 ON T1.professional_id = T13.professional_id JOIN Dogs AS T2 ON T13.dog_id = T2.dog_id WHERE T2.name = '1' or T2.name = '1'       EXCEPT SELECT T3.first_name FROM Professionals AS T3 JOIN Treatments AS T15 ON T3.professional_id = T15.professional_id JOIN Dogs AS T16 ON T15.dog_id = T16.dog_id JOIN Owners AS T4 ON T16.owner_id = T4.owner_id
hard gold: SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs

extra pred: SELECT T1.professional_id, T1.role_code, T1.email_address FROM Professionals AS T1        EXCEPT SELECT T2.professional_id, T2.professional_id, T2.email_address FROM Professionals AS T2 JOIN Treatments AS T3 ON T2.professional_id = T3.professional_id
extra gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id

extra pred: SELECT T1.treatment_type_description FROM Charges AS T2 JOIN Treatment_Types AS T1  GROUP BY T1.treatment_type_description  ORDER BY sum( T2.charge_amount) ASC LIMIT 1
extra gold: SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1

extra pred: SELECT T1.owner_id, T1.zip_code FROM Charges AS T2 JOIN Owners AS T1  GROUP BY T1.owner_id  ORDER BY sum( T2.charge_amount) DESC LIMIT 1
extra gold: SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1

extra pred: SELECT T1.owner_id, T1.zip_code FROM Charges AS T2 JOIN Owners AS T1  GROUP BY T1.owner_id  ORDER BY sum( T2.charge_amount) DESC LIMIT 1
extra gold: SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1

extra pred: SELECT T1.first_name, T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < (SELECT avg( T23.cost_of_treatment) FROM Treatments AS T23        )
extra gold: SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )

extra pred: SELECT DISTINCT T1.first_name, T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < (SELECT avg( T23.cost_of_treatment) FROM Treatments AS T23        )
extra gold: SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )

medium pred: SELECT T1.first_name, T1.last_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id
medium gold: SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id

medium pred: SELECT T1.first_name, T1.last_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id
medium gold: SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id

extra pred: SELECT T1.breed_name, T2.name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id    ORDER BY T3.date_of_treatment ASC LIMIT 1
extra gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )

extra pred: SELECT T1.breed_name, T2.date_of_treatment FROM Breeds AS T1 JOIN Dogs AS T3 ON T1.breed_code = T3.breed_code JOIN Treatments AS T2 ON T3.dog_id = T2.dog_id    ORDER BY T2.date_of_treatment ASC LIMIT 1
extra gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )

medium pred: SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1
medium gold: SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id

medium pred: SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id
medium gold: SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id

extra pred: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id    ORDER BY T2.age ASC LIMIT 1
extra gold: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )

extra pred: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id    ORDER BY T2.age DESC LIMIT 1
extra gold: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )

medium pred: SELECT T1.name, T2.street, T2.city, T2.state FROM Dogs AS T1 JOIN Treatments AS T13 ON T1.dog_id = T13.dog_id JOIN Professionals AS T2 ON T13.professional_id = T2.professional_id WHERE T2.city like '%West%'
medium gold: SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'

medium pred: SELECT sum( T1.cost_of_treatment) FROM Treatments AS T1    ORDER BY T1.cost_of_treatment DESC LIMIT 1
medium gold: SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1

extra pred: SELECT DISTINCT count(DISTINCT T1.dog_id) FROM Treatments AS T1
extra gold: SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )

medium pred: SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 WHERE T1.abandoned_yn = '0'     INTERSECT SELECT T2.name, T2.age, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn = '1'
medium gold: SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1

medium pred: SELECT T1.name, T1.age, T1.abandoned_yn FROM Dogs AS T1 WHERE T1.abandoned_yn = '0'     INTERSECT SELECT T2.name, T2.age, T2.weight FROM Dogs AS T2 WHERE T2.abandoned_yn < '0'
medium gold: SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1

easy pred: SELECT T1.age FROM Dogs AS T1    ORDER BY T1.date_of_birth DESC LIMIT 1
easy gold: SELECT max(age) FROM Dogs

easy pred: SELECT T1.age FROM Dogs AS T1    ORDER BY T1.date_of_birth DESC LIMIT 1
easy gold: SELECT max(age) FROM Dogs

easy pred: SELECT sum( T1.charge_amount) FROM Charges AS T1    ORDER BY T1.charge_type DESC LIMIT 1
easy gold: SELECT max(charge_amount) FROM Charges

medium pred: SELECT T1.breed_name FROM Breeds AS T1
medium gold: SELECT DISTINCT breed_code ,  size_code FROM dogs

medium pred: SELECT DISTINCT T1.breed_code, T1.breed_name FROM Breeds AS T1
medium gold: SELECT DISTINCT breed_code ,  size_code FROM dogs

medium pred: SELECT T1.first_name, T2.name FROM Professionals AS T1 JOIN Treatments AS T3 ON T1.professional_id = T3.professional_id JOIN Dogs AS T2 ON T3.dog_id = T2.dog_id
medium gold: SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code

medium pred: SELECT T1.first_name, T2.name FROM Professionals AS T1 JOIN Treatments AS T3 ON T1.professional_id = T3.professional_id JOIN Dogs AS T2 ON T3.dog_id = T2.dog_id
medium gold: SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code

 97%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉            | 999/1032 [00:06<00:00, 173.70it/s]easy pred: SELECT T1.Name FROM singer AS T1 WHERE T1.Citizenship != '1'██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉            | 999/1032 [00:06<00:00, 173.71it/s]
easy gold: SELECT Name FROM singer WHERE Citizenship != "France"

hard pred: SELECT count( *) FROM singer AS T1
hard gold: SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1

medium pred: SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING count( *) > 1
medium gold: SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1

medium pred: SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING count( *) > 1
medium gold: SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1

medium pred: SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code
medium gold: SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  "AirCon"

medium pred: SELECT T1.property_type_description FROM Ref_Property_Types AS T1
medium gold: SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code

eval_err_num:23
could not execute query 'SELECT T1.property_name FROM Properties AS T1 WHERE T1.room_count > House or T1.room_count > 1'. Exception: no such column: House. Database: data/spider/original/database/real_estate_properties/real_estate_properties.sqlite
hard pred: SELECT T1.property_name FROM Properties AS T1 WHERE T1.room_count > House or T1.room_count > 1
hard gold: SELECT property_name FROM Properties WHERE property_type_code  =  "House" UNION SELECT property_name FROM Properties WHERE property_type_code  =  "Apartment" AND room_count  >  1

100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1032/1032 [00:06<00:00, 157.55it/s]
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋| 1031/1032 [00:06<00:00, 157.39it/s]
                     easy                 medium               hard                 extra                all
count                250                  440                  174                  168                  1032
=====================   EXECUTION ACCURACY     =====================
execution            0.760                0.605                0.534                0.440                0.604